
@def $SERVICES = ({{ services | join(' ') }});
@def $PFX = "BANME";

@def &die ($line, $mesg) = {
  LOG log-prefix "$PFX $line $mesg: ";
  DROP;
}

# - these are the implied ferm defaults:
#   table filter { ... }
#   domain ip { ... }
# - the only other domain is 'ip6'.

chain (INPUT OUTPUT FORWARD) policy DROP;

chain OUTPUT {
  outerface lo ACCEPT;
  # FIXME -- replace this ACCEPT with an actual policy.
  ACCEPT;
}

chain INPUT {
  interface lo ACCEPT; 
  # Spoofed private, multicast, or local address
  saddr (
        {{  ferm__impossible_networks
            | difference(used_networks)
            | join(' ') }}
        ) {
    &die($LINE, "spoofed address");
  }
  # allow established connections
  mod state state (ESTABLISHED RELATED) ACCEPT;
  # rate limiting
  proto icmp icmp-type echo-request
        mod limit limit 3/second limit-burst 1 ACCEPT;
  proto tcp mod state state NEW
            mod recent set rsource name "connector" 
            @subchain("Throttle-all") {
    mod recent update seconds 2 hitcount 15 name "connector" {
      &die($LINE, "global throttle");
    }
  }
  # allow new connections to known services
  proto tcp mod state state NEW dport $SERVICES ACCEPT;
  # log & drop anything none-of-the-above
  &die($LINE, "invalid packet");
}

